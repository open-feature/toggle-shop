// AUTOMATICALLY GENERATED BY OPENFEATURE CLI, DO NOT EDIT.
import {
  OpenFeature,
  stringOrUndefined,
  objectOrUndefined,
} from "@openfeature/server-sdk";
import type {
  EvaluationContext,
  EvaluationDetails,
  FlagEvaluationOptions,
} from "@openfeature/server-sdk";

export interface GeneratedClient {
  /**
  * Add free shipping to the UI.
  * 
  * **Details:**
  * - flag key: `offer-free-shipping`
  * - default value: `false`
  * - type: `boolean`
  * 
  * Performs a flag evaluation that returns a boolean.
  * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
  * @param {FlagEvaluationOptions} options Additional flag evaluation options
  * @returns {Promise<boolean>} Flag evaluation response
  */
  offerFreeShipping(context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<boolean>;

  /**
  * Add free shipping to the UI.
  * 
  * **Details:**
  * - flag key: `offer-free-shipping`
  * - default value: `false`
  * - type: `boolean`
  * 
  * Performs a flag evaluation that a returns an evaluation details object.
  * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
  * @param {FlagEvaluationOptions} options Additional flag evaluation options
  * @returns {Promise<EvaluationDetails<boolean>>} Flag evaluation details response
  */
  offerFreeShippingDetails(context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<boolean>>;

  /**
  * Make the header stay at the top of the page while scrolling.
  * 
  * **Details:**
  * - flag key: `sticky-header`
  * - default value: `false`
  * - type: `boolean`
  * 
  * Performs a flag evaluation that returns a boolean.
  * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
  * @param {FlagEvaluationOptions} options Additional flag evaluation options
  * @returns {Promise<boolean>} Flag evaluation response
  */
  stickyHeader(context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<boolean>;

  /**
  * Make the header stay at the top of the page while scrolling.
  * 
  * **Details:**
  * - flag key: `sticky-header`
  * - default value: `false`
  * - type: `boolean`
  * 
  * Performs a flag evaluation that a returns an evaluation details object.
  * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
  * @param {FlagEvaluationOptions} options Additional flag evaluation options
  * @returns {Promise<EvaluationDetails<boolean>>} Flag evaluation details response
  */
  stickyHeaderDetails(context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<boolean>>;

  /**
  * When on, use postgres else sqlite.
  * 
  * **Details:**
  * - flag key: `use-distributed-db`
  * - default value: `false`
  * - type: `boolean`
  * 
  * Performs a flag evaluation that returns a boolean.
  * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
  * @param {FlagEvaluationOptions} options Additional flag evaluation options
  * @returns {Promise<boolean>} Flag evaluation response
  */
  useDistributedDb(context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<boolean>;

  /**
  * When on, use postgres else sqlite.
  * 
  * **Details:**
  * - flag key: `use-distributed-db`
  * - default value: `false`
  * - type: `boolean`
  * 
  * Performs a flag evaluation that a returns an evaluation details object.
  * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
  * @param {FlagEvaluationOptions} options Additional flag evaluation options
  * @returns {Promise<EvaluationDetails<boolean>>} Flag evaluation details response
  */
  useDistributedDbDetails(context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<boolean>>;

  /**
  * When on, use a secure connection to the database. This only applies when use-distributed-db is on.
  * 
  * **Details:**
  * - flag key: `use-secure-protocol`
  * - default value: `false`
  * - type: `boolean`
  * 
  * Performs a flag evaluation that returns a boolean.
  * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
  * @param {FlagEvaluationOptions} options Additional flag evaluation options
  * @returns {Promise<boolean>} Flag evaluation response
  */
  useSecureProtocol(context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<boolean>;

  /**
  * When on, use a secure connection to the database. This only applies when use-distributed-db is on.
  * 
  * **Details:**
  * - flag key: `use-secure-protocol`
  * - default value: `false`
  * - type: `boolean`
  * 
  * Performs a flag evaluation that a returns an evaluation details object.
  * @param {EvaluationContext} context The evaluation context used on an individual flag evaluation
  * @param {FlagEvaluationOptions} options Additional flag evaluation options
  * @returns {Promise<EvaluationDetails<boolean>>} Flag evaluation details response
  */
  useSecureProtocolDetails(context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<boolean>>;
}

/**
 * A factory function that returns a generated client that not bound to a domain.
 * It was generated using the OpenFeature CLI and is compatible with `@openfeature/server-sdk`.
 *
 * All domainless or unbound clients use the default provider set via {@link OpenFeature.setProvider}.
 * @param {EvaluationContext} context Evaluation context that should be set on the client to used during flag evaluations
 * @returns {GeneratedClient} Generated OpenFeature Client
 */
export function getGeneratedClient(context?: EvaluationContext): GeneratedClient
/**
 * A factory function that returns a domain-bound generated client that was
 * created using the OpenFeature CLI and is compatible with the `@openfeature/server-sdk`.
 *
 * If there is already a provider bound to this domain via {@link OpenFeature.setProvider}, this provider will be used.
 * Otherwise, the default provider is used until a provider is assigned to that domain.
 * @param {string} domain An identifier which logically binds clients with providers
 * @param {EvaluationContext} context Evaluation context that should be set on the client to used during flag evaluations
 * @returns {GeneratedClient} Generated OpenFeature Client
 */
export function getGeneratedClient(domain: string, context?: EvaluationContext): GeneratedClient
export function getGeneratedClient(domainOrContext?: string | EvaluationContext, contextOrUndefined?: EvaluationContext): GeneratedClient {
  const domain = stringOrUndefined(domainOrContext);
  const context =
    objectOrUndefined<EvaluationContext>(domainOrContext) ??
    objectOrUndefined<EvaluationContext>(contextOrUndefined);

  const client = domain ? OpenFeature.getClient(domain, context) : OpenFeature.getClient(context)

  return {
    offerFreeShipping: (context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<boolean> => {
      return client.getBooleanValue("offer-free-shipping", false, context, options);
    },

    offerFreeShippingDetails: (context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<boolean>> => {
      return client.getBooleanDetails("offer-free-shipping", false, context, options);
    },

    stickyHeader: (context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<boolean> => {
      return client.getBooleanValue("sticky-header", false, context, options);
    },

    stickyHeaderDetails: (context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<boolean>> => {
      return client.getBooleanDetails("sticky-header", false, context, options);
    },

    useDistributedDb: (context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<boolean> => {
      return client.getBooleanValue("use-distributed-db", false, context, options);
    },

    useDistributedDbDetails: (context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<boolean>> => {
      return client.getBooleanDetails("use-distributed-db", false, context, options);
    },

    useSecureProtocol: (context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<boolean> => {
      return client.getBooleanValue("use-secure-protocol", false, context, options);
    },

    useSecureProtocolDetails: (context?: EvaluationContext, options?: FlagEvaluationOptions): Promise<EvaluationDetails<boolean>> => {
      return client.getBooleanDetails("use-secure-protocol", false, context, options);
    },
  }
}